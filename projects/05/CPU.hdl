// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	Mux16(a=instruction,b=aluOut,sel=instruction[15],out=out1);
	Not(in=instruction[15],out=writeA);
	Or(a=writeA,b=instruction[5],out=loadRegisterA);
	ARegister(in=out1,load=loadRegisterA,out=aRegisterOut,out[0..14]=addressM);
	And(a=instruction[4],b=instruction[15],out=loadRegisterD);
	DRegister(in=aluOut,load=loadRegisterD,out=dRegisterOut);
	Mux16(a=aRegisterOut,b=inM,sel=instruction[12],out=temp);
	ALU(x=dRegisterOut,y=temp,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluOut,out=outM,zr=zr,ng=ng);
	
	// jump0 is 0
	// jump1
	Or(a=zr,b=ng,out=or1);
	Not(in=or1,out=jump1);
	// jump2 is zr
	// jump3
	Not(in=ng,out=jump3);
	// jump4 is ng
	// jump5
	Not(in=zr,out=jump5);
	// jump6
	Or(a=zr,b=ng,out=jump6);
	// jump7 is 1
	
	Extension16(in=jump1,out=j1);
	Extension16(in=jump3,out=j3);
	Extension16(in=jump5,out=j5);
	Extension16(in=jump6,out=j6);
	Extension16(in=zr,out=zr1);
	Extension16(in=ng,out=ng1);
	Mux8Way16(a=false,b=j1,c=zr1,d=j3,e=ng1,f=j5,g=j6,h=true,sel=instruction[0..2],out=loadPC);
	
	DeEx(in=loadPC,out=loadPC1);
	
	And(a=loadPC1,b=instruction[15],out=loadPC2);
	
	PC(in=aRegisterOut,reset=reset,load=loadPC2,inc=true,out[0..14]=pc);
	
	Not(in=instruction[3],out=notD3);
	Not(in=notD3,out=d3);
	And(a=d3,b=instruction[15],out=writeM);
	
}